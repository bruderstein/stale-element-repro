
> stale-element-repro@1.0.0 test /Users/davebrotherstone/work/stale-element-repro
> wdio


Execution of 1 spec files started at 2020-04-22T13:11:55.388Z

2020-04-22T13:11:55.398Z INFO @wdio/cli:launcher: Run onPrepare hook
2020-04-22T13:11:55.399Z INFO @wdio/browserstack-service: browserstackLocal is not enabled - skipping...
2020-04-22T13:11:55.401Z INFO @wdio/local-runner: Start worker 0-0 with arg: 
[0-0] 2020-04-22T13:11:55.632Z INFO @wdio/local-runner: Run worker command: run
[0-0] RUNNING in Edge - /tests/stale-element.js
[0-0] 2020-04-22T13:11:55.694Z INFO webdriverio: Initiate new session using the webdriver protocol
[0-0] 2020-04-22T13:11:55.696Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session
[0-0] 2020-04-22T13:11:55.696Z INFO webdriver: DATA {
  capabilities: {
    alwaysMatch: {
      browserName: 'Edge',
      browserVersion: '15.0',
      'browserstack.selenium_version': '3.10.0'
    },
    firstMatch: [ {} ]
  },
  desiredCapabilities: {
    browserName: 'Edge',
    browserVersion: '15.0',
    'browserstack.selenium_version': '3.10.0'
  }
}
[0-0] 2020-04-22T13:12:04.321Z INFO @wdio/browserstack-service: MicrosoftEdge 40.15063.674.0 session: https://automate.browserstack.com/builds/d3aeb084f830d967f580cd25de455aa69fbf9b23/sessions/c6c246b69468b3124ca32d29739a45293db02a46
[0-0] 2020-04-22T13:12:04.329Z INFO webdriver: COMMAND navigateTo("https://stale-element-repro.netlify.app/")
[0-0] 2020-04-22T13:12:04.329Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/url
[0-0] 2020-04-22T13:12:04.329Z INFO webdriver: DATA { url: 'https://stale-element-repro.netlify.app/' }
[0-0] 2020-04-22T13:12:04.728Z INFO webdriver: COMMAND findElement("css selector", ".start")
[0-0] 2020-04-22T13:12:04.729Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/element
[0-0] 2020-04-22T13:12:04.729Z INFO webdriver: DATA { using: 'css selector', value: '.start' }
[0-0] 2020-04-22T13:12:04.819Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '7c6fe2c5-ac36-4a5a-9f2e-2b489aaa3cbd',
  ELEMENT: '7c6fe2c5-ac36-4a5a-9f2e-2b489aaa3cbd'
}
[0-0] 2020-04-22T13:12:04.823Z INFO webdriver: COMMAND elementClick("7c6fe2c5-ac36-4a5a-9f2e-2b489aaa3cbd")
[0-0] 2020-04-22T13:12:04.823Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/element/7c6fe2c5-ac36-4a5a-9f2e-2b489aaa3cbd/click
[0-0] 2020-04-22T13:12:04.902Z INFO webdriver: COMMAND findElement("css selector", ".inner")
[0-0] 2020-04-22T13:12:04.902Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/element
[0-0] 2020-04-22T13:12:04.902Z INFO webdriver: DATA { using: 'css selector', value: '.inner' }
[0-0] 2020-04-22T13:12:04.969Z INFO webdriver: RESULT { message: 'No such element' }
[0-0] 2020-04-22T13:12:04.972Z INFO webdriver: COMMAND findElement("css selector", ".inner")
[0-0] 2020-04-22T13:12:04.972Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/element
[0-0] 2020-04-22T13:12:04.972Z INFO webdriver: DATA { using: 'css selector', value: '.inner' }
[0-0] 2020-04-22T13:12:05.174Z INFO webdriver: RESULT { message: 'No such element' }
[0-0] 2020-04-22T13:12:05.475Z INFO webdriver: COMMAND findElement("css selector", ".inner")
[0-0] 2020-04-22T13:12:05.475Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/element
[0-0] 2020-04-22T13:12:05.475Z INFO webdriver: DATA { using: 'css selector', value: '.inner' }
[0-0] 2020-04-22T13:12:05.561Z INFO webdriver: RESULT {
  'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
  ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
}
[0-0] 2020-04-22T13:12:05.563Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-04-22T13:12:05.563Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:05.563Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:05.675Z INFO webdriver: Retrying 1/3
2020-04-22T13:12:05.675Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:05.675Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:05.783Z INFO webdriver: Retrying 2/3
2020-04-22T13:12:05.783Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:05.783Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:05.855Z INFO webdriver: Retrying 3/3
2020-04-22T13:12:05.855Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:05.855Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:05.976Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-04-22T13:12:05.976Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:05.976Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:06.084Z INFO webdriver: Retrying 1/3
2020-04-22T13:12:06.084Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:06.084Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:06.161Z INFO webdriver: Retrying 2/3
2020-04-22T13:12:06.161Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:06.161Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:06.230Z INFO webdriver: Retrying 3/3
2020-04-22T13:12:06.230Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:06.230Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:06.475Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-04-22T13:12:06.475Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:06.475Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:06.532Z INFO webdriver: Retrying 1/3
2020-04-22T13:12:06.532Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:06.532Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:06.665Z INFO webdriver: Retrying 2/3
2020-04-22T13:12:06.665Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:06.665Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:06.775Z INFO webdriver: Retrying 3/3
2020-04-22T13:12:06.776Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:06.776Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:06.977Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-04-22T13:12:06.977Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:06.977Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:07.047Z INFO webdriver: Retrying 1/3
2020-04-22T13:12:07.047Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:07.048Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:07.114Z INFO webdriver: Retrying 2/3
2020-04-22T13:12:07.114Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:07.114Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:07.195Z INFO webdriver: Retrying 3/3
2020-04-22T13:12:07.195Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:07.195Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:07.478Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-04-22T13:12:07.478Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:07.478Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:07.559Z INFO webdriver: Retrying 1/3
2020-04-22T13:12:07.559Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:07.559Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:07.688Z INFO webdriver: Retrying 2/3
2020-04-22T13:12:07.688Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:07.688Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:07.807Z INFO webdriver: Retrying 3/3
2020-04-22T13:12:07.807Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:07.807Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:07.977Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-04-22T13:12:07.977Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:07.977Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:08.096Z INFO webdriver: Retrying 1/3
2020-04-22T13:12:08.096Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:08.096Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:08.172Z INFO webdriver: Retrying 2/3
2020-04-22T13:12:08.172Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:08.172Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:08.266Z INFO webdriver: Retrying 3/3
2020-04-22T13:12:08.266Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:08.266Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:08.476Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-04-22T13:12:08.476Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:08.476Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:08.611Z INFO webdriver: Retrying 1/3
2020-04-22T13:12:08.611Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:08.611Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:08.731Z INFO webdriver: Retrying 2/3
2020-04-22T13:12:08.731Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:08.731Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:08.823Z INFO webdriver: Retrying 3/3
2020-04-22T13:12:08.823Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:08.823Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:08.974Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-04-22T13:12:08.975Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:08.975Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:09.054Z INFO webdriver: Retrying 1/3
2020-04-22T13:12:09.054Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:09.054Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:09.107Z INFO webdriver: Retrying 2/3
2020-04-22T13:12:09.107Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:09.107Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:09.281Z INFO webdriver: Retrying 3/3
2020-04-22T13:12:09.281Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:09.281Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:09.476Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-04-22T13:12:09.476Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:09.476Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:09.539Z INFO webdriver: Retrying 1/3
2020-04-22T13:12:09.539Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:09.539Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:09.618Z INFO webdriver: Retrying 2/3
[0-0] 2020-04-22T13:12:09.619Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:09.619Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:09.701Z INFO webdriver: Retrying 3/3
2020-04-22T13:12:09.701Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:09.701Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:09.974Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-04-22T13:12:09.975Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:09.975Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:10.974Z INFO webdriver: Retrying 1/3
2020-04-22T13:12:10.974Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:10.974Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:11.119Z INFO webdriver: Retrying 2/3
2020-04-22T13:12:11.119Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:11.119Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:11.183Z INFO webdriver: Retrying 3/3
2020-04-22T13:12:11.183Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:11.183Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:11.322Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-04-22T13:12:11.323Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:11.323Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:11.497Z INFO webdriver: Retrying 1/3
2020-04-22T13:12:11.497Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:11.497Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:11.599Z INFO webdriver: Retrying 2/3
2020-04-22T13:12:11.599Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:11.599Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:11.690Z INFO webdriver: Retrying 3/3
2020-04-22T13:12:11.690Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:11.690Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:11.792Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-04-22T13:12:11.792Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:11.792Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:11.935Z INFO webdriver: Retrying 1/3
2020-04-22T13:12:11.935Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:11.935Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:12.063Z INFO webdriver: Retrying 2/3
2020-04-22T13:12:12.063Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:12.063Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:12.183Z INFO webdriver: Retrying 3/3
2020-04-22T13:12:12.183Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:12.183Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:12.328Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-04-22T13:12:12.328Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:12.328Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:12.474Z INFO webdriver: Retrying 1/3
2020-04-22T13:12:12.474Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:12.474Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:12.595Z INFO webdriver: Retrying 2/3
2020-04-22T13:12:12.595Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:12.595Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:12.708Z INFO webdriver: Retrying 3/3
2020-04-22T13:12:12.708Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:12.708Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:12.811Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-04-22T13:12:12.811Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:12.811Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:13.038Z INFO webdriver: Retrying 1/3
2020-04-22T13:12:13.038Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:13.039Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:13.243Z INFO webdriver: Retrying 2/3
2020-04-22T13:12:13.243Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:13.243Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:13.438Z INFO webdriver: Retrying 3/3
2020-04-22T13:12:13.438Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:13.438Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:13.588Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-04-22T13:12:13.590Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:13.590Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:13.689Z INFO webdriver: Retrying 1/3
2020-04-22T13:12:13.690Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:13.690Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:13.809Z INFO webdriver: Retrying 2/3
2020-04-22T13:12:13.809Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:13.809Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:13.978Z INFO webdriver: Retrying 3/3
2020-04-22T13:12:13.978Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:13.978Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:14.140Z INFO webdriver: COMMAND executeScript(<fn>, <object>)
[0-0] 2020-04-22T13:12:14.140Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:14.141Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:14.306Z INFO webdriver: Retrying 1/3
2020-04-22T13:12:14.306Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:14.306Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:14.866Z INFO webdriver: Retrying 2/3
2020-04-22T13:12:14.866Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:14.866Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] 2020-04-22T13:12:14.938Z INFO webdriver: Retrying 3/3
2020-04-22T13:12:14.938Z INFO webdriver: [POST] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46/execute/sync
[0-0] 2020-04-22T13:12:14.939Z INFO webdriver: DATA {
  script: 'return (function isElementDisplayed(element) {\n' +
    '  function nodeIsElement(node) {\n' +
    '    if (!node) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    switch (node.nodeType) {\n' +
    '      case Node.ELEMENT_NODE:\n' +
    '      case Node.DOCUMENT_NODE:\n' +
    '      case Node.DOCUMENT_FRAGMENT_NODE:\n' +
    '        return true;\n' +
    '\n' +
    '      default:\n' +
    '        return false;\n' +
    '    }\n' +
    '  }\n' +
    '\n' +
    '  function parentElementForElement(element) {\n' +
    '    if (!element) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    return enclosingNodeOrSelfMatchingPredicate(element.parentNode, nodeIsElement);\n' +
    '  }\n' +
    '\n' +
    '  function enclosingNodeOrSelfMatchingPredicate(targetNode, predicate) {\n' +
    '    for (let node = targetNode; node && node !== targetNode.ownerDocument; node = node.parentNode) if (predicate(node)) {\n' +
    '      return node;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function enclosingElementOrSelfMatchingPredicate(targetElement, predicate) {\n' +
    '    for (let element = targetElement; element && element !== targetElement.ownerDocument; element = parentElementForElement(element)) if (predicate(element)) {\n' +
    '      return element;\n' +
    '    }\n' +
    '\n' +
    '    return null;\n' +
    '  }\n' +
    '\n' +
    '  function cascadedStylePropertyForElement(element, property) {\n' +
    '    if (!element || !property) {\n' +
    '      return null;\n' +
    '    }\n' +
    '\n' +
    '    if (element instanceof DocumentFragment) {\n' +
    '      element = element.host;\n' +
    '    }\n' +
    '\n' +
    '    let computedStyle = window.getComputedStyle(element);\n' +
    '    let computedStyleProperty = computedStyle.getPropertyValue(property);\n' +
    '\n' +
    "    if (computedStyleProperty && computedStyleProperty !== 'inherit') {\n" +
    '      return computedStyleProperty;\n' +
    '    }\n' +
    '\n' +
    '    let parentElement = parentElementForElement(element);\n' +
    '    return cascadedStylePropertyForElement(parentElement, property);\n' +
    '  }\n' +
    '\n' +
    '  function elementSubtreeHasNonZeroDimensions(element) {\n' +
    '    let boundingBox = element.getBoundingClientRect();\n' +
    '\n' +
    '    if (boundingBox.width > 0 && boundingBox.height > 0) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    "    if (element.tagName.toUpperCase() === 'PATH' && boundingBox.width + boundingBox.height > 0) {\n" +
    "      let strokeWidth = cascadedStylePropertyForElement(element, 'stroke-width');\n" +
    '      return !!strokeWidth && parseInt(strokeWidth, 10) > 0;\n' +
    '    }\n' +
    '\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow === 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).some(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (nodeIsElement(childNode)) {\n' +
    '        return elementSubtreeHasNonZeroDimensions(childNode);\n' +
    '      }\n' +
    '\n' +
    '      return false;\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function elementOverflowsContainer(element) {\n' +
    "    let cascadedOverflow = cascadedStylePropertyForElement(element, 'overflow');\n" +
    '\n' +
    "    if (cascadedOverflow !== 'hidden') {\n" +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return true;\n' +
    '  }\n' +
    '\n' +
    '  function isElementSubtreeHiddenByOverflow(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!elementOverflowsContainer(element)) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (!element.childNodes.length) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    return Array.from(element.childNodes).every(childNode => {\n' +
    '      if (childNode.nodeType === Node.TEXT_NODE) {\n' +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      if (!nodeIsElement(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      if (!elementSubtreeHasNonZeroDimensions(childNode)) {\n' +
    '        return true;\n' +
    '      }\n' +
    '\n' +
    '      return isElementSubtreeHiddenByOverflow(childNode);\n' +
    '    });\n' +
    '  }\n' +
    '\n' +
    '  function isElementInsideShadowRoot(element) {\n' +
    '    if (!element) {\n' +
    '      return false;\n' +
    '    }\n' +
    '\n' +
    '    if (element.parentNode && element.parentNode.host) {\n' +
    '      return true;\n' +
    '    }\n' +
    '\n' +
    '    return isElementInsideShadowRoot(element.parentNode);\n' +
    '  }\n' +
    '\n' +
    '  if (!isElementInsideShadowRoot(element) && !document.contains(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  switch (element.tagName.toUpperCase()) {\n' +
    "    case 'BODY':\n" +
    '      return true;\n' +
    '\n' +
    "    case 'SCRIPT':\n" +
    "    case 'NOSCRIPT':\n" +
    '      return false;\n' +
    '\n' +
    "    case 'OPTGROUP':\n" +
    "    case 'OPTION':\n" +
    '      {\n' +
    "        let enclosingSelectElement = enclosingNodeOrSelfMatchingPredicate(element, e => e.tagName.toUpperCase() === 'SELECT');\n" +
    '        return isElementDisplayed(enclosingSelectElement);\n' +
    '      }\n' +
    '\n' +
    "    case 'INPUT':\n" +
    "      if (element.type === 'hidden') {\n" +
    '        return false;\n' +
    '      }\n' +
    '\n' +
    '      break;\n' +
    '\n' +
    '    default:\n' +
    '      break;\n' +
    '  }\n' +
    '\n' +
    "  if (cascadedStylePropertyForElement(element, 'visibility') !== 'visible') {\n" +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  let hasAncestorWithZeroOpacity = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return Number(cascadedStylePropertyForElement(e, 'opacity')) === 0;\n" +
    '  });\n' +
    '  let hasAncestorWithDisplayNone = !!enclosingElementOrSelfMatchingPredicate(element, e => {\n' +
    "    return cascadedStylePropertyForElement(e, 'display') === 'none';\n" +
    '  });\n' +
    '\n' +
    '  if (hasAncestorWithZeroOpacity || hasAncestorWithDisplayNone) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (!elementSubtreeHasNonZeroDimensions(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  if (isElementSubtreeHiddenByOverflow(element)) {\n' +
    '    return false;\n' +
    '  }\n' +
    '\n' +
    '  return true;\n' +
    '}).apply(null, arguments)',
  args: [
    {
      'element-6066-11e4-a52e-4f735466cecf': '8ea85490-e762-4deb-972e-9d596cbf6388',
      ELEMENT: '8ea85490-e762-4deb-972e-9d596cbf6388'
    }
  ]
}
[0-0] Error in "Stale elements shows the rerendered element as displayed"
waitUntil condition failed with the following reason: Stale element reference
[0-0] 2020-04-22T13:12:15.719Z INFO webdriver: COMMAND deleteSession()
[0-0] 2020-04-22T13:12:15.719Z INFO webdriver: [DELETE] https://hub-cloud.browserstack.com:443/wd/hub/session/c6c246b69468b3124ca32d29739a45293db02a46
[0-0] 2020-04-22T13:12:19.295Z INFO webdriver: RESULT 
[0-0] FAILED in Edge - /tests/stale-element.js
2020-04-22T13:12:19.406Z INFO @wdio/cli:launcher: Run onComplete hook

 "spec" Reporter:
------------------------------------------------------------------
[MicrosoftEdge 10 WINDOWS #0-0] Spec: /Users/davebrotherstone/work/stale-element-repro/tests/stale-element.js
[MicrosoftEdge 10 WINDOWS #0-0] Running: MicrosoftEdge (v10) on WINDOWS
[MicrosoftEdge 10 WINDOWS #0-0] Session ID: c6c246b69468b3124ca32d29739a45293db02a46
[MicrosoftEdge 10 WINDOWS #0-0]
[MicrosoftEdge 10 WINDOWS #0-0] Stale elements
[MicrosoftEdge 10 WINDOWS #0-0]    ✖ shows the rerendered element as displayed
[MicrosoftEdge 10 WINDOWS #0-0]
[MicrosoftEdge 10 WINDOWS #0-0] 1 failing (15s)
[MicrosoftEdge 10 WINDOWS #0-0]
[MicrosoftEdge 10 WINDOWS #0-0] 1) Stale elements shows the rerendered element as displayed
[MicrosoftEdge 10 WINDOWS #0-0] waitUntil condition failed with the following reason: Stale element reference
[MicrosoftEdge 10 WINDOWS #0-0] Error: waitUntil condition failed with the following reason: Stale element reference
[MicrosoftEdge 10 WINDOWS #0-0]     at /Users/davebrotherstone/work/stale-element-repro/node_modules/webdriverio/build/commands/browser/waitUntil.js:36:11
[MicrosoftEdge 10 WINDOWS #0-0]     at async Element.wrapCommandFn (/Users/davebrotherstone/work/stale-element-repro/node_modules/@wdio/utils/build/shim.js:74:23)
[MicrosoftEdge 10 WINDOWS #0-0]     at async Element.elementErrorHandlerCallbackFn (/Users/davebrotherstone/work/stale-element-repro/node_modules/webdriverio/build/middlewares.js:21:24)
[MicrosoftEdge 10 WINDOWS #0-0]     at async Element.wrapCommandFn (/Users/davebrotherstone/work/stale-element-repro/node_modules/@wdio/utils/build/shim.js:74:23)
[MicrosoftEdge 10 WINDOWS #0-0]     at async Element.wrapCommandFn (/Users/davebrotherstone/work/stale-element-repro/node_modules/@wdio/utils/build/shim.js:74:23)
[MicrosoftEdge 10 WINDOWS #0-0]     at async Element.elementErrorHandlerCallbackFn (/Users/davebrotherstone/work/stale-element-repro/node_modules/webdriverio/build/middlewares.js:21:24)
[MicrosoftEdge 10 WINDOWS #0-0]     at async Element.wrapCommandFn (/Users/davebrotherstone/work/stale-element-repro/node_modules/@wdio/utils/build/shim.js:74:23)
[MicrosoftEdge 10 WINDOWS #0-0]     at async Context.<anonymous> (/Users/davebrotherstone/work/stale-element-repro/tests/stale-element.js:8:5)
[MicrosoftEdge 10 WINDOWS #0-0]     at async Context.executeAsync (/Users/davebrotherstone/work/stale-element-repro/node_modules/@wdio/utils/build/shim.js:123:12)
[MicrosoftEdge 10 WINDOWS #0-0]     at async Context.testFrameworkFnWrapper (/Users/davebrotherstone/work/stale-element-repro/node_modules/@wdio/utils/build/test-framework/testFnWrapper.js:63:14)


Spec Files:	 0 passed, 1 failed, 1 total (100% completed) in 00:00:24 

2020-04-22T13:12:19.407Z INFO @wdio/local-runner: Shutting down spawned worker
2020-04-22T13:12:19.659Z INFO @wdio/local-runner: Waiting for 0 to shut down gracefully
2020-04-22T13:12:19.659Z INFO @wdio/local-runner: shutting down
